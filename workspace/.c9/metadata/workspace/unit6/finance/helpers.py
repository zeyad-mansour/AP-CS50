{"filter":false,"title":"helpers.py","tooltip":"~/workspace/unit6/finance/helpers.py","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":57,"column":19},"action":"remove","lines":["import requests","import urllib.parse","","from flask import redirect, render_template, request, session","from functools import wraps","","","def apology(message, code=400):","    \"\"\"Render message as an apology to user.\"\"\"","    def escape(s):","        \"\"\"","        Escape special characters.","        https://github.com/jacebrowning/memegen#special-characters","        \"\"\"","        for old, new in [(\"-\", \"--\"), (\" \", \"-\"), (\"_\", \"__\"), (\"?\", \"~q\"),","                         (\"%\", \"~p\"), (\"#\", \"~h\"), (\"/\", \"~s\"), (\"\\\"\", \"''\")]:","            s = s.replace(old, new)","        return s","    return render_template(\"apology.html\", top=code, bottom=escape(message)), code","","def login_required(f):","    \"\"\"","    Decorate routes to require login.","    http://flask.pocoo.org/docs/1.0/patterns/viewdecorators/","    \"\"\"","    @wraps(f)","    def decorated_function(*args, **kwargs):","        if session.get(\"user_id\") is None:","            return redirect(\"/login\")","        return f(*args, **kwargs)","    return decorated_function","","","def usd(value):","    \"\"\"Format value as USD.\"\"\"","    return f\"${value:,.2f}\"","","","def lookup(symbol):","    \"\"\" Look up quote for symbol. // removed {urllib.parse.quote_plus(symbol)}  \"\"\"","    try:","        response = requests.get(f\"https://api.iextrading.com/1.0/stock/{symbol}/quote\")","        response.raise_for_status()","    except requests.RequestException:","        return None","","    # Parse response","    try:","        quote = response.json()","        return {","            \"name\": quote[\"companyName\"],","            \"price\": quote[\"latestPrice\"],","            \"symbol\": quote[\"symbol\"],","            \"52whigh\": usd(quote[\"week52High\"]),","            \"52wlow\": usd(quote[\"week52Low\"])","        }","    except (KeyError, TypeError, ValueError):","        return None"],"id":23},{"start":{"row":0,"column":0},"end":{"row":81,"column":27},"action":"insert","lines":["import csv","import os","import urllib.request","","from flask import redirect, render_template, request, session","from functools import wraps","","","def apology(message, code=400):","    \"\"\"Render message as an apology to user.\"\"\"","    def escape(s):","        \"\"\"","        Escape special characters.","        https://github.com/jacebrowning/memegen#special-characters","        \"\"\"","        for old, new in [(\"-\", \"--\"), (\" \", \"-\"), (\"_\", \"__\"), (\"?\", \"~q\"),","                         (\"%\", \"~p\"), (\"#\", \"~h\"), (\"/\", \"~s\"), (\"\\\"\", \"''\")]:","            s = s.replace(old, new)","        return s","    return render_template(\"apology.html\", top=code, bottom=escape(message)), code","","","def login_required(f):","    \"\"\"","    Decorate routes to require login.","    http://flask.pocoo.org/docs/0.12/patterns/viewdecorators/","    \"\"\"","    @wraps(f)","    def decorated_function(*args, **kwargs):","        if session.get(\"user_id\") is None:","            return redirect(\"/login\")","        return f(*args, **kwargs)","    return decorated_function","","","def lookup(symbol):","    \"\"\"Look up quote for symbol.\"\"\"","","    # Reject symbol if it starts with caret","    if symbol.startswith(\"^\"):","        return None","","    # Reject symbol if it contains comma","    if \",\" in symbol:","        return None","","    # Query Alpha Vantage for quote","    # https://www.alphavantage.co/documentation/","    try:","","        # GET CSV","        url = f\"https://www.alphavantage.co/query?apikey={os.getenv('API_KEY')}&datatype=csv&function=TIME_SERIES_INTRADAY&interval=1min&symbol={symbol}\"","        webpage = urllib.request.urlopen(url)","","        # Parse CSV","        datareader = csv.reader(webpage.read().decode(\"utf-8\").splitlines())","","        # Ignore first row","        next(datareader)","","        # Parse second row","        row = next(datareader)","","        # Ensure stock exists","        try:","            price = float(row[4])","        except:","            return None","","        # Return stock's name (as a str), price (as a float), and (uppercased) symbol (as a str)","        return {","            \"price\": price,","            \"symbol\": symbol.upper()","        }","","    except:","        return None","","","def usd(value):","    \"\"\"Format value as USD.\"\"\"","    return f\"${value:,.2f}\""]}],[{"start":{"row":83,"column":14},"end":{"row":83,"column":30},"action":"remove","lines":["40KDEG1CRORDKFUH"],"id":24},{"start":{"row":83,"column":13},"end":{"row":83,"column":14},"action":"remove","lines":[" "]},{"start":{"row":83,"column":12},"end":{"row":83,"column":13},"action":"remove","lines":[":"]},{"start":{"row":83,"column":11},"end":{"row":83,"column":12},"action":"remove","lines":["s"]},{"start":{"row":83,"column":10},"end":{"row":83,"column":11},"action":"remove","lines":["i"]},{"start":{"row":83,"column":9},"end":{"row":83,"column":10},"action":"remove","lines":[" "]},{"start":{"row":83,"column":8},"end":{"row":83,"column":9},"action":"remove","lines":["I"]},{"start":{"row":83,"column":7},"end":{"row":83,"column":8},"action":"remove","lines":["P"]},{"start":{"row":83,"column":6},"end":{"row":83,"column":7},"action":"remove","lines":["A"]},{"start":{"row":83,"column":5},"end":{"row":83,"column":6},"action":"remove","lines":[" "]},{"start":{"row":83,"column":4},"end":{"row":83,"column":5},"action":"remove","lines":["#"]},{"start":{"row":83,"column":0},"end":{"row":83,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":82,"column":0},"end":{"row":83,"column":0},"action":"remove","lines":["",""],"id":25}],[{"start":{"row":51,"column":69},"end":{"row":51,"column":76},"action":"remove","lines":["API_KEY"],"id":26},{"start":{"row":51,"column":69},"end":{"row":51,"column":85},"action":"insert","lines":["40KDEG1CRORDKFUH"]}]]},"ace":{"folds":[],"scrolltop":606,"scrollleft":0,"selection":{"start":{"row":51,"column":85},"end":{"row":51,"column":85},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":39,"state":"start","mode":"ace/mode/python"}},"timestamp":1556682746439,"hash":"45332913eba24583891bc63155a74e6516baea86"}